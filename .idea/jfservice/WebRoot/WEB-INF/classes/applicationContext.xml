<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/tx
     	   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- 采用注释的方式配置bean -->
	<context:annotation-config />
	<!-- 配置要扫描的包 -->
	<context:component-scan base-package="com.jfservice.sys"></context:component-scan>
	<!-- 数据库配置文件位置 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 支持@Aspectj标志 就不需要在xml文件中配置了 -->
	<aop:aspectj-autoproxy />
	<!-- 通过bean加载 -->
	<!-- <bean class="com.jfservice.sys.aop.LoggerAnnotationAutoProxyCreator"></bean> -->
	<!-- 配置dbcp数据源 -->
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 队列中的最小等待数 -->
		<property name="minIdle" value="${jdbc.minIdle}"></property>
		<!-- 队列中的最大等待数 -->
		<property name="maxIdle" value="${jdbc.maxIdle}"></property>
		<!-- 最长等待时间，单位毫秒 -->
		<property name="maxWait" value="${jdbc.maxWait}"></property>
		<!-- 最大活跃数 -->
		<property name="maxActive" value="${jdbc.maxActive}"></property>
		<property name="initialSize" value="${jdbc.initialSize}"></property>
		<property name="validationQuery" value="Select 1"></property>
		<property name="testOnBorrow" value="true"></property>
	</bean>
	<!-- 配置mybitasSqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:sqlMyBatisConfig.xml" />
		<property name="mapperLocations" value="classpath*:sqlMappers/*.xml"></property>
		<property name="typeAliasesPackage" value="classpath*:com.jfservice.sys.*.model"></property>
	</bean>
    <!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       <property name="basePackage" value="com.jfservice.sys.*.model.sqlMappers" />
       <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean> -->
	<!-- 配置SqlSessionTemplate -->
	<bean id="SqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<!-- 事务配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 两种声明事务的方式 -->
	<!-- 第一种使用声明式配置事务,但是需在每个接口使用@Transactional(propagation=Propagation.REQUIRED, 
		readOnly=true)来说明 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
	<!-- 第二种使用aop技术,横向切换拦截说明 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED"></tx:method>
			<tx:method name="update*" propagation="REQUIRED"></tx:method>
			<tx:method name="delete*" propagation="REQUIRED"></tx:method>
			<tx:method name="batch*" propagation="REQUIRED"></tx:method>
			<tx:method name="*" propagation="REQUIRED" read-only="true"></tx:method>
		</tx:attributes>
	</tx:advice>
	<aop:config proxy-target-class="true">
		<aop:pointcut id="managerMethod"
			expression="execution(* com.jfservice.sys.*.service.*.*(..))"></aop:pointcut>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="managerMethod" />
	</aop:config>
	<!-- 配置事件监听 -->
	<bean id="userHandler" class="com.jfservice.sys.client.handler.weike.UserHandler" />
	<bean id="deviceHandler" class="com.jfservice.sys.client.handler.weike.DeviceHandler" />
	<bean id="immediationHandler" class="com.jfservice.sys.client.handler.weike.ImmediationHandler" />
	<bean id="alphaHandler" class="com.jfservice.sys.client.handler.alpha.AlphaHandler" />
	<bean id="alphaUserHandler" class="com.jfservice.sys.client.handler.alpha.AlpUserHandler" />
	
	<bean id="mainNotification" class="com.jfservice.sys.client.core.ClientMessageNotification" />
    <!-- 客户端的id的管理类 -->
    <bean id="clientSessionManager" class="com.jfservice.sys.client.manager.ClientSessionManager" scope="singleton"/>
    <!-- 响应类 -->
    <bean id="resp" class="com.jfservice.common.bean.weike.ResponseBean" scope="singleton" />
    <bean id="common" class="com.jfservice.common.bean.weike.Common" scope="singleton" />
    <bean id="result" class="com.jfservice.common.bean.weike.Result" scope="singleton" />
    <!-- <import resource="applicationContext-mina.xml" /> -->
</beans>